{
  "info": {
    "name": "Medical Logistics API",
    "description": "API collection for Medical Logistics Order Management System. This collection demonstrates the complete order lifecycle including creation, approval, and cancellation.",
    "_postman_id": "12345678-1234-1234-1234-123456789012",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Check Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/health",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "health"]
            },
            "description": "Check if the application is running and healthy"
          }
        }
      ]
    },
    {
      "name": "Order Management",
      "item": [
        {
          "name": "Create Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test response status",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Test response body",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('items');",
                  "    pm.expect(response.status).to.equal('PENDING');",
                  "});",
                  "",
                  "// Save order ID for subsequent requests",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set(\"orderId\", response.id);",
                  "    console.log(\"Order ID saved: \" + response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"name\": \"Surgical Masks\",\n      \"quantity\": 100\n    },\n    {\n      \"name\": \"Disposable Gloves\",\n      \"quantity\": 200\n    },\n    {\n      \"name\": \"Hand Sanitizer\",\n      \"quantity\": 50\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders"]
            },
            "description": "Create a new order with multiple medical items"
          }
        },
        {
          "name": "Create Order - Single Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Order contains single item\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.items).to.have.lengthOf(1);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"name\": \"COVID-19 Test Kits\",\n      \"quantity\": 500\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders"]
            },
            "description": "Create an order with a single item"
          }
        },
        {
          "name": "Get All Orders",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Orders have required fields\", function () {",
                  "    const response = pm.response.json();",
                  "    if (response.length > 0) {",
                  "        const order = response[0];",
                  "        pm.expect(order).to.have.property('id');",
                  "        pm.expect(order).to.have.property('status');",
                  "        pm.expect(order).to.have.property('items');",
                  "        pm.expect(order).to.have.property('createdAt');",
                  "        pm.expect(order).to.have.property('updatedAt');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders"]
            },
            "description": "Retrieve all orders in the system"
          }
        },
        {
          "name": "Get Order by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Order ID matches request\", function () {",
                  "    const response = pm.response.json();",
                  "    const requestedId = pm.collectionVariables.get(\"orderId\");",
                  "    pm.expect(response.id).to.equal(requestedId);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}"]
            },
            "description": "Retrieve a specific order by its ID"
          }
        },
        {
          "name": "Approve Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Order status is APPROVED\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('APPROVED');",
                  "});",
                  "",
                  "pm.test(\"Updated timestamp changed\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.updatedAt).to.not.equal(response.createdAt);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}/approve",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}", "approve"]
            },
            "description": "Approve a pending order. Only works if order status is PENDING."
          }
        },
        {
          "name": "Cancel Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Order status is CANCELLED\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('CANCELLED');",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Create a new order before cancelling",
                  "// This ensures we have a PENDING order to cancel"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}/cancel",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}", "cancel"]
            },
            "description": "Cancel a pending order. Only works if order status is PENDING."
          }
        }
      ]
    },
    {
      "name": "Error Cases",
      "item": [
        {
          "name": "Create Order - Empty Items",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message is present\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders"]
            },
            "description": "Test validation: Order must have at least one item"
          }
        },
        {
          "name": "Create Order - Invalid Quantity",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"name\": \"Test Item\",\n      \"quantity\": 0\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders"]
            },
            "description": "Test validation: Quantity must be at least 1"
          }
        },
        {
          "name": "Get Non-Existent Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates order not found\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "00000000-0000-0000-0000-000000000000"]
            },
            "description": "Test error handling for non-existent order"
          }
        },
        {
          "name": "Approve Already Approved Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error indicates invalid state transition\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('Cannot approve');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}/approve",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}", "approve"]
            },
            "description": "Test error: Cannot approve an already approved order"
          }
        }
      ]
    },
    {
      "name": "Order Lifecycle Tests",
      "item": [
        {
          "name": "Complete Order Lifecycle",
          "item": [
            {
              "name": "1. Create New Order",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Order created successfully\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set(\"lifecycleOrderId\", response.id);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [\n    {\n      \"name\": \"Lifecycle Test Item\",\n      \"quantity\": 10\n    }\n  ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/orders",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "orders"]
                }
              }
            },
            {
              "name": "2. Verify Order is Pending",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Order status is PENDING\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.status).to.equal('PENDING');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/orders/{{lifecycleOrderId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "orders", "{{lifecycleOrderId}}"]
                }
              }
            },
            {
              "name": "3. Approve Order",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Order approved successfully\", function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.status).to.equal('APPROVED');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/orders/{{lifecycleOrderId}}/approve",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "orders", "{{lifecycleOrderId}}", "approve"]
                }
              }
            },
            {
              "name": "4. Try to Cancel Approved Order",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Cannot cancel approved order\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/orders/{{lifecycleOrderId}}/cancel",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "orders", "{{lifecycleOrderId}}", "cancel"]
                }
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set timestamp for unique test data",
          "pm.collectionVariables.set(\"timestamp\", new Date().getTime());"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "lifecycleOrderId",
      "value": "",
      "type": "string"
    }
  ]
}